import pygame
import sys
from tkinter import messagebox, Tk
import time

window_width = 1550
window_height = 800

pygame.init()
window = pygame.display.set_mode((window_width, window_height))

columns = 50
rows = 50

box_width = window_width // columns
box_height = window_height // rows

grid = [[None for _ in range(rows)] for _ in range(columns)]
open_set = []
closed_set = []
path = []

font = pygame.font.Font(None, 24)

class Box:
    def __init__(self, i, j):
        self.x = i
        self.y = j
        self.start = False
        self.wall = False
        self.target = False
        self.g = float('inf')
        self.h = 0
        self.f = 0
        self.parent = None
        self.neighbours = []

    def draw(self, win, color):
        pygame.draw.rect(win, color, (self.x * box_width,
                                       self.y * box_height, box_width - 2, box_height - 2))

    def set_neighbours(self):
        if self.x > 0:
            self.neighbours.append(grid[self.x - 1][self.y])
        if self.x < columns - 1:
            self.neighbours.append(grid[self.x + 1][self.y])
        if self.y > 0:
            self.neighbours.append(grid[self.x][self.y - 1])
        if self.y < rows - 1:
            self.neighbours.append(grid[self.x][self.y + 1])

def heuristic(a, b):
    return abs(a.x - b.x) + abs(a.y - b.y)

def initialize_grid():
    global grid
    for i in range(columns):
        for j in range(rows):
            grid[i][j] = Box(i, j)
    for i in range(columns):
        for j in range(rows):
            grid[i][j].set_neighbours()

def main():
    global start_box_set, target_box_set, start_time
    start_box_set = False
    target_box_set = False
    begin_search = False
    searching = True
    target_box = None
    start_time = None

    initialize_grid()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    x, y = pygame.mouse.get_pos()
                    i = x // box_width
                    j = y // box_height
                    if not start_box_set and not grid[i][j].wall:
                        start_box = grid[i][j]
                        start_box.start = True
                        open_set.append(start_box)
                        start_box_set = True
                    elif not target_box_set and not grid[i][j].wall and not grid[i][j].start:
                        target_box = grid[i][j]
                        target_box.target = True
                        target_box_set = True
                    elif start_box_set and target_box_set and not grid[i][j].start and not grid[i][j].target:
                        grid[i][j].wall = True
                elif event.button == 3:
                    if not target_box_set:
                        x, y = pygame.mouse.get_pos()
                        i = x // box_width
                        j = y // box_height
                        target_box = grid[i][j]
                        target_box.target = True
                        target_box_set = True
            elif event.type == pygame.MOUSEMOTION and pygame.mouse.get_pressed()[0]:
                x, y = pygame.mouse.get_pos()
                i = x // box_width
                j = y // box_height
                if start_box_set and target_box_set and not grid[i][j].start and not grid[i][j].target:
                    grid[i][j].wall = True
            elif event.type == pygame.KEYDOWN and target_box_set:
                if event.key == pygame.K_RETURN:
                    begin_search = True

        if begin_search:
            if len(open_set) > 0 and searching:
                current_box = min(open_set, key=lambda x: x.f)
                open_set.remove(current_box)
                closed_set.append(current_box)

                if current_box == target_box:
                    searching = False
                    elapsed_time = time.time() - start_time
                    print("Elapsed time to reach the destination: {:.2f} seconds".format(elapsed_time))
                    while current_box.parent:
                        path.append(current_box.parent)
                        current_box = current_box.parent
                else:
                    for neighbor in current_box.neighbours:
                        if neighbor not in closed_set and not neighbor.wall:
                            temp_g = current_box.g + 1
                            if neighbor in open_set:
                                if temp_g < neighbor.g:
                                    neighbor.g = temp_g
                                    neighbor.parent = current_box
                            else:
                                neighbor.g = temp_g
                                neighbor.h = heuristic(neighbor, target_box)
                                neighbor.f = neighbor.g + neighbor.h
                                neighbor.parent = current_box
                                open_set.append(neighbor)
            else:
                if searching:
                    Tk().wm_withdraw()
                    messagebox.showinfo(
                        "No Solution", "There is no solution!")
                    searching = False

        if begin_search and start_time is None:
            start_time = time.time()

        window.fill((0, 0, 0))

        for i in range(columns):
            for j in range(rows):
                box = grid[i][j]
                box.draw(window, (100, 100, 100))

                if box in open_set:
                    box.draw(window, (255, 153, 51))  
                if box in closed_set:
                    box.draw(window, (102, 255, 153))  
                if box in path:
                    box.draw(window, (102, 178, 255))  

                if box.start:
                    box.draw(window, (0, 200, 200))
                if box.wall:
                    box.draw(window, (10, 10, 10))
                if box.target:
                    box.draw(window, (200, 200, 0))

        pygame.display.flip()
        pygame.time.delay(10) 

main()
